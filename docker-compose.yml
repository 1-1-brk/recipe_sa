#  /usr/local/mysql-8.0.20-macos10.15-x86_64/bin/mysqld
services:

# DATABASE
  mysqldb:
    container_name: mysqldb
    build: 
      context: DB
      dockerfile: Dockerfile
    # image: mysql:latest
    # environment:
    #   MYSQL_DATABASE: recipe_database
    #   MYSQL_ROOT_PASSWORD: Terra3927
    #   MYSQL_USER: spring
    #   MYSQL_PASSWORD: spring
    # ports:
    #   - "3306:3306"
    networks:
      - back-db
    healthcheck:
      test: "/usr/bin/mysql --user=spring --password=spring --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 100
#    volumes:
#      - db_data: /var/lib/mysql


# BACKEND
  # docker build -t recipe_sa_backend_PROBE .

#   docker run -p 8080:8080 --name recipe_sa_backend-2 --net front-back --net back-db -e MYSQL_HOST=mysqldb -e MYSQL_USER=root -e MYSQL_USER=spring -e MYSQL_PASSWORD=spring -e MYSQL_PORT=3306 recipe_sa_backend_probe
  backend:
    container_name: backend
    build:
      context: recipe_sa_backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_USER: spring
      MYSQL_PASSWORD: spring
#      MYSQL_ROOT_PASSWORD: Terra3927
      MYSQL_PORT: 3306
    depends_on:
      mysqldb:
        condition: service_healthy
    networks:
      - front-back
      - back-db

# FRONTEND
  frontend:
    container_name: frontend
#  frontend-rsa-v1:
    build:
      context: recipe_sa_frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - front-back
    environment:
      NODE_ENV: production
      SERVICE_NAME: frontend
      REACT_APP_BASE_URL: 64.226.88.22
#    volumes:
#      - webdata:/app/build/
     #(ПОПРОБОВАТЬ !!!!! КОГДА ФРОНТ это тоже NGINX и остается бежать
      #а потом через такой volume передает другому nginx отдельному)
#      - type: volume
#        source: webdata
#        target: /app/build/

#      - webdata:/app/build/


# WEBSERVER (NGINX)
  nginx:
    container_name: web-server
#    image: nginx:alpine
    environment:
      SERVICE_NAME: web-server
    build:
      context: ./recipe_sa_frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - front-back
    depends_on:
      - frontend
      - backend
#    volumes:
#      - ./nginx/conf:/etc/nginx/conf.d
#      - webdata:/usr/share/nginx/html
#      - type: bind
#        source: ./nginx/conf/
#        target: /etc/nginx/conf.d/
#        read_only: true
#      - type: volume
#        source: webdata
#        target: /usr/share/nginx/html/
#        read_only: true

#      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
#      - webdata:/usr/share/nginx/html/:ro
#    - ./certbot/www/:/var/www/certbot/:ro
#    - ./certbot/conf/:/etc/letsencrypt/

networks:
  back-db:
  front-back:


# volumes:
#   db_data:
#   webdata:
